/*
为什么要清除浮动
    有些网页的效果是一个长长的列表，列表里面的内容随着加载会自动增加
    比如购物网站里面就使用这种做法

    里面的元素可以使用浮动达到这种效果，父元素也可以设置宽度限制浮动元素
    但是由于加载的内容不确定，如何确定父元素高度呢？

    最好的做法就是让浮动的盒子撑开父元素，由盒子数量，让浏览器自动计算父亲的高度

    如果不给父元素高度，子元素浮动，那么父元素的高度就会变成0
    因为浮动元素是不占父元素的空间的，他们两个是在不同的平面中
    父元素不占孔间距，那么下面的标准流元素就会上移，最终是标准流和浮动元素重叠了

    之前的设计都是视觉效果，让子元素浮在父元素上面，遮住了父亲
    但是现在要让这两个不在同一平面的对象产生一种可以计算父元素的关系0
    而清除浮动就是实现这种效果，或者理解为清除子元素浮动造成的效果

总结
    由于父级盒子很多情况下，不方便给高度，但是子盒子浮动有不占有位置，最后父级盒子高度为0，就会影响下面的标准流盒子
    清除浮动就是清除浮动造成的影响
    清除浮动之后，父级就会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了

清除浮动
    clear : 属性值
        left :不允许左侧有浮动元素(清除左侧浮动的影响)
        right :不允许右侧有浮动元素(清除右侧浮动的影响)
        both :同时清除左右两侧浮动的影响

    清除浮动的策略：闭合浮动
    根据这个策略有以下四种方法
        额外标签法：也成为了隔墙法
            在浮动元素末尾添加一个空的标签(新增的标签不能是行内元素,必须是块级元素)
            缺点：增加了无意义标签，结构性较差

        父级添加overflow属性
            将其属性值设置为hidden，auto或者scroll都可以
            注意：是给父元素添加代码，用css属性实现
            缺点：无法显示溢出部分，如果子盒子超过父元素的宽度，会被切掉

        父级添加after伪元素
            .clearfix:after {
                content:"";
                display:block;
                height:0;
                clear:both;
                visibility:hidden;
             }

             为了兼容ie6，ie7
             .clearfix {
                *zoom:1;
             }
        父级添加双伪元素
            .clearfix:before,
            .clearfix:after {
                content:""'
                display:table;
            }

            .clearfix:after {
                clear:both;
            }

            .clearfix {
                *zoom:1;
            }
 */